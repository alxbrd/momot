package at.ac.tuwien.big.momot.examples.modularization.jsep.derived

import at.ac.tuwien.big.moea.^experiment.executor.listener.SeedRuntimePrintListener
import at.ac.tuwien.big.momot.examples.modularization.jsme.ModularizationCalculator
import at.ac.tuwien.big.momot.examples.modularization.jsme.ModularizationRules
import at.ac.tuwien.big.momot.examples.modularization.jsme.modularization.ModularizationModel
import at.ac.tuwien.big.momot.examples.modularization.jsme.modularization.ModularizationPackage
import at.ac.tuwien.big.momot.examples.modularization.jsme.modularization.Module
import at.ac.tuwien.big.momot.problem.unit.parameter.increment.IncrementalStringValue
import at.ac.tuwien.big.momot.^search.algorithm.operator.mutation.TransformationPlaceholderMutation
import at.ac.tuwien.big.momot.^search.algorithm.operator.mutation.TransformationVariableMutation
import at.ac.tuwien.big.momot.^search.^fitness.dimension.TransformationLengthDimension
import at.ac.tuwien.big.momot.^search.solution.repair.TransformationPlaceholderRepairer
import at.ac.tuwien.big.momot.util.MomotUtil
import org.moeaframework.core.operator.OnePointCrossover
import org.moeaframework.core.operator.TournamentSelection

var attribute = "calculation"
var penalty = 1000

initialization  = {
	ModularizationPackage.eINSTANCE.class // register package in standalone
}

search = {
	model = {
		file = "data/input/models/mtunis.xmi"
	}
	solutionLength = 50
	transformations = {
		modules = [ "data/modularization_jsep.henshin" ]
		parameterValues = {
			ModularizationRules.CreateModule.Parameter::MODULE_NAME :
					new IncrementalStringValue("Module", "A")
		}
	}
	fitness = {
		preprocess = { // use attribute storage for external calculation
			val root = MomotUtil.getRoot(solution.execute, typeof(ModularizationModel))
			solution.setAttribute("root", root)
			solution.setAttribute(attribute, new ModularizationCalculator(root))
		}
		objectives = { 
			Coupling : minimize { // java-like syntax
				val calculator = solution.getAttribute(attribute, typeof(ModularizationCalculator))
				calculator.metrics.coupling
			}
			Cohesion : maximize { 
				val calculator = solution.getAttribute(attribute, typeof(ModularizationCalculator))
				calculator.metrics.cohesion
			}
			NrModules : maximize "modules->size()" // OCL-specification
			MQ : maximize {
				val calculator = solution.getAttribute(attribute, typeof(ModularizationCalculator))
				calculator.metrics.modularizationQuality
			}
			MinMaxDiff : minimize {
				val calculator = solution.getAttribute(attribute, typeof(ModularizationCalculator))
				calculator.metrics.minMaxDiff
			}
//			NrIsolatedModules : minimize "modules->select(m | m.classes->size() = 1)->size()"
			SolutionLength : minimize new TransformationLengthDimension // generic objectives
		}
		
		constraints = { // mark invalid solutions
			UnassignedClasses : minimize { 
				penalty * (root as ModularizationModel).classes.filter[c | c.module == null].size
			}
			EmptyModules : minimize { 
				penalty * (root as ModularizationModel).^modules.filter[m | m.classes.empty].size
			}
		}
		solutionRepairer = new TransformationPlaceholderRepairer
	}
	
	algorithms = {
		NSGAIII : moea.createNSGAIII(
				0, 6,
				new TournamentSelection(2),
				new OnePointCrossover(1.0), 
				new TransformationPlaceholderMutation(0.10),
				new TransformationVariableMutation(orchestration.searchHelper, 0.10))
		eMOEA : moea.createEpsilonMOEA(
				0.02,
				new TournamentSelection(2),
				new OnePointCrossover(1.0), 
				new TransformationPlaceholderMutation(0.10),
				new TransformationVariableMutation(orchestration.searchHelper, 0.10))
		RS : moea.createRandomSearch
	}
	
	equalityHelper = {
		if(left instanceof Module && right instanceof Module) {
			val leftIndex = (left.eContainer as ModularizationModel).^modules.indexOf(left)
			val rightIndex = (right.eContainer as ModularizationModel).^modules.indexOf(right)
			return leftIndex.equals(rightIndex) 
		}
		left.equals(right)
	}
} 

experiment = {
	populationSize = 300
	maxEvaluations = 21000
	nrRuns = 30
	progressListeners = [ new SeedRuntimePrintListener ]
}

analysis = {
	indicators = [ hypervolume generationalDistance contribution ]
	significance = 0.01
	show = [ aggregateValues statisticalSignificance individualValues ]
	outputFile = "data/output/analysis/mtunis_statistic2.txt"	
}

results = {
	objectives = {
		outputFile = "data/output/approximationSet/mtunis_statistic2.pf"
		printOutput
	}
	models = {
		outputDirectory = "data/output/models/mtunis_statistic2/"
	}
}
