/**
 */
package metasearch.provider;

import java.util.ArrayList;
import java.util.Collection;

import metasearch.util.MetasearchAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MetasearchItemProviderAdapterFactory extends MetasearchAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MetasearchItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link metasearch.HillClimbing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HillClimbingItemProvider hillClimbingItemProvider;

	/**
	 * This creates an adapter for a {@link metasearch.HillClimbing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHillClimbingAdapter() {
		if (hillClimbingItemProvider == null) {
			hillClimbingItemProvider = new HillClimbingItemProvider(this);
		}

		return hillClimbingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metasearch.NSGAII} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NSGAIIItemProvider nsgaiiItemProvider;

	/**
	 * This creates an adapter for a {@link metasearch.NSGAII}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNSGAIIAdapter() {
		if (nsgaiiItemProvider == null) {
			nsgaiiItemProvider = new NSGAIIItemProvider(this);
		}

		return nsgaiiItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metasearch.NSGAIII} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NSGAIIIItemProvider nsgaiiiItemProvider;

	/**
	 * This creates an adapter for a {@link metasearch.NSGAIII}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNSGAIIIAdapter() {
		if (nsgaiiiItemProvider == null) {
			nsgaiiiItemProvider = new NSGAIIIItemProvider(this);
		}

		return nsgaiiiItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metasearch.SimulatedAnnealing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimulatedAnnealingItemProvider simulatedAnnealingItemProvider;

	/**
	 * This creates an adapter for a {@link metasearch.SimulatedAnnealing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimulatedAnnealingAdapter() {
		if (simulatedAnnealingItemProvider == null) {
			simulatedAnnealingItemProvider = new SimulatedAnnealingItemProvider(this);
		}

		return simulatedAnnealingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metasearch.MemeticAlgorithm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MemeticAlgorithmItemProvider memeticAlgorithmItemProvider;

	/**
	 * This creates an adapter for a {@link metasearch.MemeticAlgorithm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMemeticAlgorithmAdapter() {
		if (memeticAlgorithmItemProvider == null) {
			memeticAlgorithmItemProvider = new MemeticAlgorithmItemProvider(this);
		}

		return memeticAlgorithmItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metasearch.LocalSearchApplication} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocalSearchApplicationItemProvider localSearchApplicationItemProvider;

	/**
	 * This creates an adapter for a {@link metasearch.LocalSearchApplication}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocalSearchApplicationAdapter() {
		if (localSearchApplicationItemProvider == null) {
			localSearchApplicationItemProvider = new LocalSearchApplicationItemProvider(this);
		}

		return localSearchApplicationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metasearch.Container} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContainerItemProvider containerItemProvider;

	/**
	 * This creates an adapter for a {@link metasearch.Container}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContainerAdapter() {
		if (containerItemProvider == null) {
			containerItemProvider = new ContainerItemProvider(this);
		}

		return containerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metasearch.DecreasingMaximumComparatorGenerator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DecreasingMaximumComparatorGeneratorItemProvider decreasingMaximumComparatorGeneratorItemProvider;

	/**
	 * This creates an adapter for a {@link metasearch.DecreasingMaximumComparatorGenerator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDecreasingMaximumComparatorGeneratorAdapter() {
		if (decreasingMaximumComparatorGeneratorItemProvider == null) {
			decreasingMaximumComparatorGeneratorItemProvider = new DecreasingMaximumComparatorGeneratorItemProvider(this);
		}

		return decreasingMaximumComparatorGeneratorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metasearch.RandomWeightGenerator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RandomWeightGeneratorItemProvider randomWeightGeneratorItemProvider;

	/**
	 * This creates an adapter for a {@link metasearch.RandomWeightGenerator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRandomWeightGeneratorAdapter() {
		if (randomWeightGeneratorItemProvider == null) {
			randomWeightGeneratorItemProvider = new RandomWeightGeneratorItemProvider(this);
		}

		return randomWeightGeneratorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metasearch.ChangingNeighborhood} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChangingNeighborhoodItemProvider changingNeighborhoodItemProvider;

	/**
	 * This creates an adapter for a {@link metasearch.ChangingNeighborhood}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChangingNeighborhoodAdapter() {
		if (changingNeighborhoodItemProvider == null) {
			changingNeighborhoodItemProvider = new ChangingNeighborhoodItemProvider(this);
		}

		return changingNeighborhoodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metasearch.IteratingAlgorithm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IteratingAlgorithmItemProvider iteratingAlgorithmItemProvider;

	/**
	 * This creates an adapter for a {@link metasearch.IteratingAlgorithm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIteratingAlgorithmAdapter() {
		if (iteratingAlgorithmItemProvider == null) {
			iteratingAlgorithmItemProvider = new IteratingAlgorithmItemProvider(this);
		}

		return iteratingAlgorithmItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metasearch.RandomSolutionInitializer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RandomSolutionInitializerItemProvider randomSolutionInitializerItemProvider;

	/**
	 * This creates an adapter for a {@link metasearch.RandomSolutionInitializer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRandomSolutionInitializerAdapter() {
		if (randomSolutionInitializerItemProvider == null) {
			randomSolutionInitializerItemProvider = new RandomSolutionInitializerItemProvider(this);
		}

		return randomSolutionInitializerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link metasearch.DiscardingSolutionInitializer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiscardingSolutionInitializerItemProvider discardingSolutionInitializerItemProvider;

	/**
	 * This creates an adapter for a {@link metasearch.DiscardingSolutionInitializer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiscardingSolutionInitializerAdapter() {
		if (discardingSolutionInitializerItemProvider == null) {
			discardingSolutionInitializerItemProvider = new DiscardingSolutionInitializerItemProvider(this);
		}

		return discardingSolutionInitializerItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (hillClimbingItemProvider != null) hillClimbingItemProvider.dispose();
		if (nsgaiiItemProvider != null) nsgaiiItemProvider.dispose();
		if (nsgaiiiItemProvider != null) nsgaiiiItemProvider.dispose();
		if (simulatedAnnealingItemProvider != null) simulatedAnnealingItemProvider.dispose();
		if (memeticAlgorithmItemProvider != null) memeticAlgorithmItemProvider.dispose();
		if (localSearchApplicationItemProvider != null) localSearchApplicationItemProvider.dispose();
		if (containerItemProvider != null) containerItemProvider.dispose();
		if (decreasingMaximumComparatorGeneratorItemProvider != null) decreasingMaximumComparatorGeneratorItemProvider.dispose();
		if (randomWeightGeneratorItemProvider != null) randomWeightGeneratorItemProvider.dispose();
		if (changingNeighborhoodItemProvider != null) changingNeighborhoodItemProvider.dispose();
		if (iteratingAlgorithmItemProvider != null) iteratingAlgorithmItemProvider.dispose();
		if (randomSolutionInitializerItemProvider != null) randomSolutionInitializerItemProvider.dispose();
		if (discardingSolutionInitializerItemProvider != null) discardingSolutionInitializerItemProvider.dispose();
	}

}
