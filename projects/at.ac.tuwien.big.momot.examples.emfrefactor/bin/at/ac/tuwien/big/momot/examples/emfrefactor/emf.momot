import org.eclipse.emf.ecore.EcorePackage
import org.moeaframework.core.operator.TournamentSelection
import org.moeaframework.core.operator.OnePointCrossover
import at.ac.tuwien.big.momot.^search.algorithm.operator.mutation.TransformationPlaceholderMutation
import org.eclipse.emf.ecore.ENamedElement
import at.ac.tuwien.big.momot.problem.unit.parameter.comparator.DefaultEObjectEqualityHelper
import at.ac.tuwien.big.moea.^experiment.executor.listener.SeedRuntimePrintListener
import at.ac.tuwien.big.momot.^search.^fitness.dimension.TransformationLengthDimension
import at.ac.tuwien.big.momot.examples.emfrefactor.metric.NSUBEC

initialization  = {
	EcorePackage::eINSTANCE.eClass
}

search EMFRefactorSearch = {
	model = "model/input/metamodel.ecore"
	solutionLength = 5
	transformations = {
		modules = [ "transformation/refactorings/ecore/remove_empty_sub_eclass_all.henshin" ]
		ignoreUnits = [
			// only use conditional unit
			"remove_empty_sub_eclass_all::removeEmptySubEClass::check_subetypes",
			"remove_empty_sub_eclass_all::removeEmptySubEClass::check_superetypes",
			"remove_empty_sub_eclass_all::removeEmptySubEClass::check_empty_eclass",
			"remove_empty_sub_eclass_all::removeEmptySubEClass::initialCheck",
			"remove_empty_sub_eclass_all::removeEmptySubEClass::check_preconditions",
			"remove_empty_sub_eclass_all::removeEmptySubEClass::execute",
			"remove_empty_sub_eclass_all::removeEmptySubEClass::remove"
		]
	}

	fitness = {
		objectives = {
			SolutionLength : minimize new TransformationLengthDimension
			SubClasses : minimize {
				val subClassCalculator = new NSUBEC()
				val eClasses = graph.getDomain(EcorePackage.Literals.ECLASS.eClass, true)
				var subClasses = 0.0;
				for(eClass : eClasses) {
					subClassCalculator.context = #[ eClass ]
					subClasses += subClassCalculator.calculate
				}					
				return subClasses;
			}
		}
	}

	algorithms = {
		NSGAIII : moea.createNSGAIII(
				new TournamentSelection(2),
				new OnePointCrossover(1.0),  
				new TransformationPlaceholderMutation(0.15))
	}
	
	equalityHelper = {
		// use simple name based matching
		if(left instanceof ENamedElement && right instanceof ENamedElement)
			return (left as ENamedElement).name.equals((right as ENamedElement).name);
		return new DefaultEObjectEqualityHelper().equals(left, right); // left.equals(right)
	}
}

experiment = {
	populationSize = 50
	maxEvaluations = 1000
	nrRuns = 30
	progressListeners = [ new SeedRuntimePrintListener ]
}

finalization = {
	saveObjectives "model/output/metamodel/referenceSet.pf"
	saveSolutions "model/output/metamodel/solutions/"
	printSolutions
	printObjectives
}
